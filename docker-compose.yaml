services:
  kafka-broker-1:
    image: bitnami/kafka:4.0.0-debian-12-r7
    restart: always
    hostname: kafka-broker-1
    ports:
      - "19092:19092" #внешнее
      - "9092:9092" #внутреннее
      - "9093:9093"    # Контроллерный порт для KRaft
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ENABLE_KRAFT: "yes"  # Включаем KRaft
      KAFKA_CFG_NODE_ID: 1       # ID
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"  # Роли ноды
      # Настройки контроллера
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER" #для связи между контроллерами
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-broker-1:9093"  # Список нод-контроллеров
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,EXTERNAL://localhost:19092,CONTROLLER://kafka-broker-1:9093  #по каким адресам клиенты могут подключиться к брокеру Kafka
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT #сопоставление
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,EXTERNAL://:19092,CONTROLLER://:9093 # слушатели
      # Доп. настройки
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT  #брокеры  для внутреннего обмена данными
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 #одной копии
      ALLOW_PLAINTEXT_LISTENER: "yes" #нешифрованного соединения
      KAFKA_CFG_LOG_LEVEL: "DEBUG" # уровень логирования
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: 
        - "CMD-SHELL"
        - "kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1"
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s
    networks:
          - aston
      
      
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - '5433:5432'
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
          - aston
  

  appconfig:
    build:
        context: ./config-service
        dockerfile: Dockerfile
    image: appconfig:latest 
    restart: unless-stopped
    ports:
      - '8888:8888' #2ое значение из докер-файла, 1ое произвольный-свободный
    networks:
          - aston
  
  appeureka:
    build:
        context: ./eureka-service
        dockerfile: Dockerfile
    image: eureka:latest 
    restart: unless-stopped
    ports:
      - '8761:8761'
    depends_on: 
      appconfig:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://appconfig:8888/config
      - EUREKA_URL=http://appeureka:8761/eureka
    networks:
          - aston

  appusers:
    build:
        context: ./user-service
        dockerfile: Dockerfile
    image: users:latest 
    restart: unless-stopped
    ports:
      - '8181:8181'
    depends_on:
      appconfig:
        condition: service_started
      db:
        condition: service_healthy 
      appeureka:
        condition: service_started
      kafka-broker-1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://appconfig:8888/config
      - DATABASE_URL=jdbc:postgresql://db:5432/postgres
      - EUREKA_URL=http://appeureka:8761/eureka
      - KAFKA_URL=http://kafka-broker-1:19092
    networks:
          - aston
        

  appmail:
    build:
        context: ./mail-service
        dockerfile: Dockerfile
    image: mail:latest
    restart: unless-stopped
    ports:
      - '8282:8282'
    depends_on:
      appconfig:
        condition: service_started
      appeureka:
        condition: service_started
      kafka-broker-1:
        condition: service_started
    environment:
      - USER_NAME
      - SPRING_CLOUD_CONFIG_URI=http://appconfig:8888/config
      - EUREKA_URL=http://appeureka:8761/eureka
      - KAFKA_URL=http://kafka-broker-1:19092
      - MAIL_NAME=nelly.astafeva@yandex.ru
      - MAIL_PASSWORD=ppturgpemlvazaby
    networks:
          - aston


  appgateway:
    build:
        context: ./gateway-service
        dockerfile: Dockerfile
    image: gateway:latest 
    restart: unless-stopped
    ports:
      - '8383:8383'
    depends_on:
      appconfig:
        condition: service_started
      appeureka:
        condition: service_started
      appusers:
        condition: service_started
      appmail:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://appconfig:8888/config
      - EUREKA_URL=http://appeureka:8761/eureka
      - USER_URL=http://appusers:8181
      - MAIL_URL=http://appmail:8282
    networks:
          - aston


volumes:
  db:
    driver: local
  kafka_data:
    driver: local

networks:
  aston:
    driver: bridge
    external: true